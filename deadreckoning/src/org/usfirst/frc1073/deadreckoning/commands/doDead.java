// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.deadreckoning.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.deadreckoning.Robot;
import org.usfirst.frc1073.deadreckoning.RobotMap;

/**
 *
 */
public class doDead extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public doDead() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.deadReckoning);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.deadReckoningAnalogGyro1.calibrate();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double curr_ang;
    	double curr_accel_x, curr_accel_y;
    	curr_ang = RobotMap.deadReckoningAnalogGyro1.getAngle();
    	SmartDashboard.putNumber("Current_Angle", curr_ang);
    	curr_accel_x = RobotMap.deadReckoningAnalogAccelerometer1.getX();
    	curr_accel_y = RobotMap.deadReckoningAnalogAccelerometer1.getY();
    	SmartDashboard.putNumber("Current X Acceleration", curr_accel_x);
    	SmartDashboard.putNumber("Current Y Acceleration", curr_accel_y);
    	

    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
